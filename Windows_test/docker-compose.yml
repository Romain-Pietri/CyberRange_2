networks:
  guacnetwork_compose:
    driver: bridge
  vulnerable_network:
    driver: bridge
  SOC_NET:
    driver: bridge

# services
services:

  # guacd
  guacd:
    container_name: guacd_compose
    image: guacamole/guacd
    networks:
      - guacnetwork_compose
    restart: always
    volumes:
    - ./drive:/drive:rw
    - ./record:/record:rw
    ports:
      - 4822:4822/tcp
  # postgres
  postgres:
    container_name: postgres_guacamole_compose
    environment:
      PGDATA: /var/lib/postgresql/data/guacamole
      POSTGRES_DB: guacamole_db
      POSTGRES_PASSWORD: 'ChooseYourOwnPasswordHere1234'
      POSTGRES_USER: guacamole_user
    image: postgres:15.2-alpine
    networks:
      - guacnetwork_compose
    restart: always
    volumes:
    - ./init:/docker-entrypoint-initdb.d:z
    - ./data:/var/lib/postgresql/data:Z
    ports:
      - 5432:5432/tcp

  # guacamole
  guacamole:
    container_name: guacamole_compose
    group_add:
      - "1000"
    depends_on:
    - guacd
    - postgres
    environment:
      GUACD_HOSTNAME: guacd
      POSTGRES_DATABASE: guacamole_db
      POSTGRES_HOSTNAME: postgres
      POSTGRES_PASSWORD: 'ChooseYourOwnPasswordHere1234'
      POSTGRES_USER: guacamole_user
      RECORDING_SEARCH_PATH: /record
    image: guacamole/guacamole
    networks:
      - guacnetwork_compose
    volumes:
      - ./record:/record:rw
    ports:
## enable next line if not using nginx
      - 8080:8080/tcp # Guacamole is on :8080/guacamole, not /.
## enable next line when using nginx
    ##- 8080/tcp
    restart: always

  windows_vm:
    build:
      context: .
      dockerfile: Dockerfile.qemu
    networks:
      - vulnerable_network
    privileged: true  # Autoriser KVM
    volumes:
      - ./windows.iso:/opt/windows.iso
    environment:
      - DISPLAY=${DISPLAY}  # Pour afficher l'interface graphique si nécessaire
    ports:
        - "5901:5901"  # Accès VNC

  kali_blue1:
      build:
        context: .
        dockerfile: Dockerfile.kali_blue
      ports:
        - "3389:3389"
      privileged: true 
      networks:
        - guacnetwork_compose
        - vulnerable_network
        - SOC_NET

  kali_blue2:
    build:
      context: .
      dockerfile: Dockerfile.kali_blue
    ports:
      - "3390:3389"
    privileged: true 
    networks:
      - guacnetwork_compose
      - vulnerable_network
      - SOC_NET

  kali_blue3:
    build:
      context: .
      dockerfile: Dockerfile.kali_blue
    ports:
      - "3391:3389"
    privileged: true 
    networks:
      - guacnetwork_compose
      - vulnerable_network
      - SOC_NET

#   thehive:
#     image: strangebee/thehive:5.2
#     restart: unless-stopped
#     depends_on:
#       - cassandra
#       - elasticsearch
#       - minio
#       - cortex.local
#     mem_limit: 1500m
#     ports:
#       - "0.0.0.0:9000:9000"
#     environment:
#       - JVM_OPTS="-Xms1024M -Xmx1024M"
#     command:
#       - --secret
#       - "lab123456789"
#       - "--cql-hostnames"
#       - "cassandra"
#       - "--index-backend"
#       - "elasticsearch"
#       - "--es-hostnames"
#       - "elasticsearch"
#       - "--s3-endpoint"
#       - "http://minio:9002"
#       - "--s3-access-key"
#       - "minioadmin"
#       - "--s3-secret-key"
#       - "minioadmin"
#       - "--s3-use-path-access-style"
#     #If you are familiar with the previous docker compose file you will note that the Cortex ports and keys have been omitted this is because we can now
#     #complete the integration from TheHive GUI directly.
#     volumes:
#       - thehivedata:/etc/thehive/application.conf
#     networks:
#       - SOC_NET

#   cassandra:
#     image: 'cassandra:4'
#     restart: unless-stopped
#     ports:
#       - "0.0.0.0:9042:9042"
#     environment:
#       - CASSANDRA_CLUSTER_NAME=TheHive
#     volumes:
#       - cassandradata:/var/lib/cassandra
#     networks:
#       - SOC_NET
    
#   elasticsearch:
#     image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
#     restart: unless-stopped
#     mem_limit: 512m
#     ports:
#       - "0.0.0.0:9200:9200"
#     environment:
#       - discovery.type=single-node
#       - xpack.security.enabled=false
#       - cluster.name=hive
#       - http.host=0.0.0.0
#       - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
#     volumes:
#       - elasticsearchdata:/usr/share/elasticsearch/data
#     networks:
#       - SOC_NET

#   minio:
#     image: quay.io/minio/minio
#     restart: unless-stopped
#     command: ["minio", "server", "/data", "--console-address", ":9002"]
#     environment:
#       - MINIO_ROOT_USER=minioadmin
#       - MINIO_ROOT_PASSWORD=minioadmin
#     ports:
#       - "0.0.0.0:9002:9002"
#     volumes:
#       - "miniodata:/data"
#     networks:
#       - SOC_NET

# #appended .local onto the container name because when we integrate cortex with TheHive using the new GUI menu it only accept a FQDN.
#   cortex.local:
#     image: thehiveproject/cortex:latest
#     restart: unless-stopped
#     environment:
#       - job_directory=/tmp/cortex-jobs
#       - docker_job_directory=/tmp/cortex-jobs
#     volumes:
#       #For analyzers and responders (called neurons, also based on docker containers) to work, we need to bind the hosts docker socket into the cortex container
#       #so it can use the docker service of the host, and share the job directory between the container and the host.
#       #An alternative way of doing this would be to run docker (neurons) within the cortex docker container (docker-ception), the container will need to be run in 
#       #privileged mode and you will need the --start-docker parameter for this work. It is however not advised to run docker containers in priviliged mode because it
#       #grants the docker container root capabilities over the host system which is a security risk. 
#       - /var/run/docker.sock:/var/run/docker.sock
#       - /tmp/cortex-jobs:/tmp/cortex-jobs
#       - ./cortex/logs:/var/log/cortex
#       - ./cortex/application.conf:/cortex/application.conf
#     depends_on:
#       - elasticsearch
#     ports:
#       - "0.0.0.0:9001:9001"
#     networks:
#       - SOC_NET
#   #appended .local onto the container name because when we integrate MISP with TheHive using the new GUI menu it only accepts a FQDN.
#   misp.local:
#     image: coolacid/misp-docker:core-latest
#     restart: unless-stopped
#     depends_on: 
#       - misp_mysql
#     ports:
#       - "0.0.0.0:80:80"
#       - "0.0.0.0:443:443"
#     volumes:
#       - "./server-configs/:/var/www/MISP/app/Config/"
#       - "./logs/:/var/www/MISP/app/tmp/logs/"
#       - "./files/:/var/www/MISP/app/files"
#       - "./ssl/:/etc/nginx/certs"
#     environment:
#       - MYSQL_HOST=misp_mysql
#       - MYSQL_DATABASE=mispdb
#       - MYSQL_USER=mispuser
#       - MYSQL_PASSWORD=misppass
#       - MISP_ADMIN_EMAIL=mispadmin@lab.local
#       - MISP_ADMIN_PASSPHRASE=mispadminpass
#       - MISP_BASEURL=localhost
#       - TIMEZONE=Europe/London
#       - "INIT=true"         
#       - "CRON_USER_ID=1"   
#       - "REDIS_FQDN=redis"
#       - "HOSTNAME=https://10.0.2.10"
#     networks:
#       - SOC_NET

#   misp_mysql:
#     image: mysql/mysql-server:5.7
#     restart: unless-stopped
#     volumes:
#       - mispsqldata:/var/lib/mysql
#     environment:
#       - MYSQL_DATABASE=mispdb
#       - MYSQL_USER=mispuser
#       - MYSQL_PASSWORD=misppass
#       - MYSQL_ROOT_PASSWORD=mispass
#     networks:
#       - SOC_NET
#   redis:
#     image: redis:latest
#     networks:
#       - SOC_NET
#   misp-modules:
#     image: coolacid/misp-docker:modules-latest
#     environment:
#       - "REDIS_BACKEND=redis"
#     depends_on:
#       - redis
#       - misp_mysql
#     networks:
#       - SOC_NET
#   #removed the cortex volumes as we no longer require it, cortex will share the /tmp directory for jobs, the logs and application files will be stored in the cortex folder
#   #in the same directory on the host where the docker-compose.yml resides for ease of access. 
# volumes:
#   miniodata:
#   cassandradata:
#   elasticsearchdata:
#   thehivedata:
#   mispsqldata:

    